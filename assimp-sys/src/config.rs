use libc::{c_float, c_int, c_uint};

#[macro_export]
macro_rules! config_str {
    ($s:ident) => (::std::ffi::CString::new($s).unwrap().as_ptr())
}

// Macro to reduce the repetition of defining all the property constants, not exported
macro_rules! prop {
    ($i:ident = $v:expr) => (pub static $i: &'static str = $v;)
}

pub const AI_SBBC_DEFAULT_MAX_BONES: c_int = 60;
pub const AI_SLM_DEFAULT_MAX_TRIANGLES: c_int = 1000000;
pub const AI_SLM_DEFAULT_MAX_VERTICES: c_int = 1000000;
pub const AI_LMW_MAX_WEIGHTS: c_int = 0x4;
pub const AI_DEBONE_THRESHOLD: c_float = 1.0f32;
pub const PP_ICL_PTCACHE_SIZE: c_int = 12;

// LIBRARY SETTINGS
prop! { AI_CONFIG_GLOB_MEASURE_TIME = "GLOB_MEASURE_TIME" }
prop! { AI_CONFIG_IMPORT_NO_SKELETON_MESHES = "IMPORT_NO_SKELETON_MESHES" }
prop! { AI_CONFIG_GLOB_MULTITHREADING = "GLOB_MULTITHREADING" }

// POST PROCESSING SETTINGS
prop! { AI_CONFIG_PP_SBBC_MAX_BONES  = "PP_SBBC_MAX_BONES" }
prop! { AI_CONFIG_PP_CT_MAX_SMOOTHING_ANGLE = "PP_CT_MAX_SMOOTHING_ANGLE" }
prop! { AI_CONFIG_PP_CT_TEXTURE_CHANNEL_INDEX = "PP_CT_TEXTURE_CHANNEL_INDEX" }
prop! { AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE = "PP_GSN_MAX_SMOOTHING_ANGLE" }
prop! { AI_CONFIG_IMPORT_MDL_COLORMAP = "IMPORT_MDL_COLORMAP" }
prop! { AI_CONFIG_PP_RRM_EXCLUDE_LIST = "PP_RRM_EXCLUDE_LIST" }
prop! { AI_CONFIG_PP_PTV_KEEP_HIERARCHY = "PP_PTV_KEEP_HIERARCHY" }
prop! { AI_CONFIG_PP_PTV_NORMALIZE = "PP_PTV_NORMALIZE" }
prop! { AI_CONFIG_PP_PTV_ADD_ROOT_TRANSFORMATION = "PP_PTV_ADD_ROOT_TRANSFORMATION" }
prop! { AI_CONFIG_PP_PTV_ROOT_TRANSFORMATION = "PP_PTV_ROOT_TRANSFORMATION" }
prop! { AI_CONFIG_PP_FD_REMOVE = "PP_FD_REMOVE" }
prop! { AI_CONFIG_PP_OG_EXCLUDE_LIST = "PP_OG_EXCLUDE_LIST" }
prop! { AI_CONFIG_PP_SLM_TRIANGLE_LIMIT = "PP_SLM_TRIANGLE_LIMIT" }
prop! { AI_CONFIG_PP_SLM_VERTEX_LIMIT = "PP_SLM_VERTEX_LIMIT" }
prop! { AI_CONFIG_PP_LBW_MAX_WEIGHTS = "PP_LBW_MAX_WEIGHTS" }
prop! { AI_CONFIG_PP_DB_THRESHOLD = "PP_DB_THRESHOLD" }
prop! { AI_CONFIG_PP_DB_ALL_OR_NONE = "PP_DB_ALL_OR_NONE" }
prop! { AI_CONFIG_PP_ICL_PTCACHE_SIZE = "PP_ICL_PTCACHE_SIZE" }
prop! { AI_CONFIG_PP_RVC_FLAGS = "PP_RVC_FLAGS" }
prop! { AI_CONFIG_PP_SBP_REMOVE = "PP_SBP_REMOVE" }
prop! { AI_CONFIG_PP_FID_ANIM_ACCURACY = "PP_FID_ANIM_ACCURACY" }
prop! { AI_CONFIG_PP_TUV_EVALUATE = "PP_TUV_EVALUATE" }
prop! { AI_CONFIG_FAVOUR_SPEED = "FAVOUR_SPEED" }

// IMPORTER SETTINGS
prop! { AI_CONFIG_IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS
               = "IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS" }
prop! { AI_CONFIG_IMPORT_FBX_READ_ALL_MATERIALS = "IMPORT_FBX_READ_ALL_MATERIALS" }
prop! { AI_CONFIG_IMPORT_FBX_READ_MATERIALS = "IMPORT_FBX_READ_MATERIALS" }
prop! { AI_CONFIG_IMPORT_FBX_READ_CAMERAS = "IMPORT_FBX_READ_CAMERAS" }
prop! { AI_CONFIG_IMPORT_FBX_READ_LIGHTS = "IMPORT_FBX_READ_LIGHTS" }
prop! { AI_CONFIG_IMPORT_FBX_READ_ANIMATIONS = "IMPORT_FBX_READ_ANIMATIONS" }
prop! { AI_CONFIG_IMPORT_FBX_STRICT_MODE = "IMPORT_FBX_STRICT_MODE" }
prop! { AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS = "IMPORT_FBX_PRESERVE_PIVOTS" }
prop! { AI_CONFIG_IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES
               = "IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES" }
prop! { AI_CONFIG_IMPORT_GLOBAL_KEYFRAME = "IMPORT_GLOBAL_KEYFRAME" }
prop! { AI_CONFIG_IMPORT_MD3_KEYFRAME = "IMPORT_MD3_KEYFRAME" }
prop! { AI_CONFIG_IMPORT_MD2_KEYFRAME = "IMPORT_MD2_KEYFRAME" }
prop! { AI_CONFIG_IMPORT_MDL_KEYFRAME = "IMPORT_MDL_KEYFRAME" }
prop! { AI_CONFIG_IMPORT_MDC_KEYFRAME = "IMPORT_MDC_KEYFRAME" }
prop! { AI_CONFIG_IMPORT_SMD_KEYFRAME = "IMPORT_SMD_KEYFRAME" }
prop! { AI_CONFIG_IMPORT_UNREAL_KEYFRAME = "IMPORT_UNREAL_KEYFRAME" }
prop! { AI_CONFIG_IMPORT_AC_SEPARATE_BFCULL = "IMPORT_AC_SEPARATE_BFCULL" }
prop! { AI_CONFIG_IMPORT_AC_EVAL_SUBDIVISION = "IMPORT_AC_EVAL_SUBDIVISION" }
prop! { AI_CONFIG_IMPORT_UNREAL_HANDLE_FLAGS = "UNREAL_HANDLE_FLAGS" }
prop! { AI_CONFIG_IMPORT_TER_MAKE_UVS = "IMPORT_TER_MAKE_UVS" }
prop! { AI_CONFIG_IMPORT_ASE_RECONSTRUCT_NORMALS = "IMPORT_ASE_RECONSTRUCT_NORMALS" }
prop! { AI_CONFIG_IMPORT_MD3_HANDLE_MULTIPART = "IMPORT_MD3_HANDLE_MULTIPART" }
prop! { AI_CONFIG_IMPORT_MD3_SKIN_NAME = "IMPORT_MD3_SKIN_NAME" }
prop! { AI_CONFIG_IMPORT_MD3_SHADER_SRC = "IMPORT_MD3_SHADER_SRC" }
prop! { AI_CONFIG_IMPORT_LWO_ONE_LAYER_ONLY = "IMPORT_LWO_ONE_LAYER_ONLY" }
prop! { AI_CONFIG_IMPORT_MD5_NO_ANIM_AUTOLOAD = "IMPORT_MD5_NO_ANIM_AUTOLOAD" }
prop! { AI_CONFIG_IMPORT_LWS_ANIM_START = "IMPORT_LWS_ANIM_START" }
prop! { AI_CONFIG_IMPORT_LWS_ANIM_END = "IMPORT_LWS_ANIM_END" }
prop! { AI_CONFIG_IMPORT_IRR_ANIM_FPS = "IMPORT_IRR_ANIM_FPS" }
prop! { AI_CONFIG_IMPORT_OGRE_MATERIAL_FILE = "IMPORT_OGRE_MATERIAL_FILE" }
prop! { AI_CONFIG_IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME
               = "IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME" }
prop! { AI_CONFIG_IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS
               = "IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS" }
prop! { AI_CONFIG_IMPORT_IFC_SKIP_CURVE_REPRESENTATIONS
               = "IMPORT_IFC_SKIP_CURVE_REPRESENTATIONS" }
prop! { AI_CONFIG_IMPORT_IFC_CUSTOM_TRIANGULATION = "IMPORT_IFC_CUSTOM_TRIANGULATION" }
prop! { AI_CONFIG_IMPORT_COLLADA_IGNORE_UP_DIRECTION = "IMPORT_COLLADA_IGNORE_UP_DIRECTION" }

bitflags! {
    #[repr(C)]
    flags AiComponent: c_uint {
        const AICOMPONENT_NORMALS = 0x2,
        const AICOMPONENT_TANGENTS_AND_BITANGENTS = 0x4,
        const AICOMPONENT_COLORS = 0x8,
        const AICOMPONENT_TEXCOORDS = 0x10,
        const AICOMPONENT_BONE_WEIGHTS = 0x20,
        const AICOMPONENT_ANIMATIONS = 0x40,
        const AICOMPONENT_TEXTURES = 0x80,
        const AICOMPONENT_LIGHTS = 0x100,
        const AICOMPONENT_CAMERAS = 0x200,
        const AICOMPONENT_MESHES = 0x400,
        const AICOMPONENT_MATERIALS = 0x800
    }
}

bitflags! {
    #[repr(C)]
    flags AiUVTransformFlags : c_uint {
        const AI_UVTRAFO_SCALING = 0x1,
        const AI_UVTRAFO_ROTATION = 0x2,
        const AI_UVTRAFO_TRANSLATION = 0x4,
        const AI_UVTRAFO_ALL = AI_UVTRAFO_SCALING.bits
                             | AI_UVTRAFO_ROTATION.bits
                             | AI_UVTRAFO_TRANSLATION.bits
    }
}
